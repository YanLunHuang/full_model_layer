// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module film_switch_ap_fixed_ap_fixed_ap_fixed_config42_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data1_0_V_V_TDATA,
        data1_0_V_V_TVALID,
        data1_0_V_V_TREADY,
        data1_1_V_V_TDATA,
        data1_1_V_V_TVALID,
        data1_1_V_V_TREADY,
        data1_2_V_V_TDATA,
        data1_2_V_V_TVALID,
        data1_2_V_V_TREADY,
        data1_3_V_V_TDATA,
        data1_3_V_V_TVALID,
        data1_3_V_V_TREADY,
        data1_4_V_V_TDATA,
        data1_4_V_V_TVALID,
        data1_4_V_V_TREADY,
        data1_5_V_V_TDATA,
        data1_5_V_V_TVALID,
        data1_5_V_V_TREADY,
        data1_6_V_V_TDATA,
        data1_6_V_V_TVALID,
        data1_6_V_V_TREADY,
        data1_7_V_V_TDATA,
        data1_7_V_V_TVALID,
        data1_7_V_V_TREADY,
        data1_8_V_V_TDATA,
        data1_8_V_V_TVALID,
        data1_8_V_V_TREADY,
        data1_9_V_V_TDATA,
        data1_9_V_V_TVALID,
        data1_9_V_V_TREADY,
        data1_10_V_V_TDATA,
        data1_10_V_V_TVALID,
        data1_10_V_V_TREADY,
        data1_11_V_V_TDATA,
        data1_11_V_V_TVALID,
        data1_11_V_V_TREADY,
        data1_12_V_V_TDATA,
        data1_12_V_V_TVALID,
        data1_12_V_V_TREADY,
        data1_13_V_V_TDATA,
        data1_13_V_V_TVALID,
        data1_13_V_V_TREADY,
        data1_14_V_V_TDATA,
        data1_14_V_V_TVALID,
        data1_14_V_V_TREADY,
        data1_15_V_V_TDATA,
        data1_15_V_V_TVALID,
        data1_15_V_V_TREADY,
        data2_V_V_TDATA,
        data2_V_V_TVALID,
        data2_V_V_TREADY,
        res_0_V_V_TDATA,
        res_0_V_V_TVALID,
        res_0_V_V_TREADY,
        res_1_V_V_TDATA,
        res_1_V_V_TVALID,
        res_1_V_V_TREADY,
        res_2_V_V_TDATA,
        res_2_V_V_TVALID,
        res_2_V_V_TREADY,
        res_3_V_V_TDATA,
        res_3_V_V_TVALID,
        res_3_V_V_TREADY,
        res_4_V_V_TDATA,
        res_4_V_V_TVALID,
        res_4_V_V_TREADY,
        res_5_V_V_TDATA,
        res_5_V_V_TVALID,
        res_5_V_V_TREADY,
        res_6_V_V_TDATA,
        res_6_V_V_TVALID,
        res_6_V_V_TREADY,
        res_7_V_V_TDATA,
        res_7_V_V_TVALID,
        res_7_V_V_TREADY,
        res_8_V_V_TDATA,
        res_8_V_V_TVALID,
        res_8_V_V_TREADY,
        res_9_V_V_TDATA,
        res_9_V_V_TVALID,
        res_9_V_V_TREADY,
        res_10_V_V_TDATA,
        res_10_V_V_TVALID,
        res_10_V_V_TREADY,
        res_11_V_V_TDATA,
        res_11_V_V_TVALID,
        res_11_V_V_TREADY,
        res_12_V_V_TDATA,
        res_12_V_V_TVALID,
        res_12_V_V_TREADY,
        res_13_V_V_TDATA,
        res_13_V_V_TVALID,
        res_13_V_V_TREADY,
        res_14_V_V_TDATA,
        res_14_V_V_TVALID,
        res_14_V_V_TREADY,
        res_15_V_V_TDATA,
        res_15_V_V_TVALID,
        res_15_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp1_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] data1_0_V_V_TDATA;
input   data1_0_V_V_TVALID;
output   data1_0_V_V_TREADY;
input  [31:0] data1_1_V_V_TDATA;
input   data1_1_V_V_TVALID;
output   data1_1_V_V_TREADY;
input  [31:0] data1_2_V_V_TDATA;
input   data1_2_V_V_TVALID;
output   data1_2_V_V_TREADY;
input  [31:0] data1_3_V_V_TDATA;
input   data1_3_V_V_TVALID;
output   data1_3_V_V_TREADY;
input  [31:0] data1_4_V_V_TDATA;
input   data1_4_V_V_TVALID;
output   data1_4_V_V_TREADY;
input  [31:0] data1_5_V_V_TDATA;
input   data1_5_V_V_TVALID;
output   data1_5_V_V_TREADY;
input  [31:0] data1_6_V_V_TDATA;
input   data1_6_V_V_TVALID;
output   data1_6_V_V_TREADY;
input  [31:0] data1_7_V_V_TDATA;
input   data1_7_V_V_TVALID;
output   data1_7_V_V_TREADY;
input  [31:0] data1_8_V_V_TDATA;
input   data1_8_V_V_TVALID;
output   data1_8_V_V_TREADY;
input  [31:0] data1_9_V_V_TDATA;
input   data1_9_V_V_TVALID;
output   data1_9_V_V_TREADY;
input  [31:0] data1_10_V_V_TDATA;
input   data1_10_V_V_TVALID;
output   data1_10_V_V_TREADY;
input  [31:0] data1_11_V_V_TDATA;
input   data1_11_V_V_TVALID;
output   data1_11_V_V_TREADY;
input  [31:0] data1_12_V_V_TDATA;
input   data1_12_V_V_TVALID;
output   data1_12_V_V_TREADY;
input  [31:0] data1_13_V_V_TDATA;
input   data1_13_V_V_TVALID;
output   data1_13_V_V_TREADY;
input  [31:0] data1_14_V_V_TDATA;
input   data1_14_V_V_TVALID;
output   data1_14_V_V_TREADY;
input  [31:0] data1_15_V_V_TDATA;
input   data1_15_V_V_TVALID;
output   data1_15_V_V_TREADY;
input  [31:0] data2_V_V_TDATA;
input   data2_V_V_TVALID;
output   data2_V_V_TREADY;
output  [31:0] res_0_V_V_TDATA;
output   res_0_V_V_TVALID;
input   res_0_V_V_TREADY;
output  [31:0] res_1_V_V_TDATA;
output   res_1_V_V_TVALID;
input   res_1_V_V_TREADY;
output  [31:0] res_2_V_V_TDATA;
output   res_2_V_V_TVALID;
input   res_2_V_V_TREADY;
output  [31:0] res_3_V_V_TDATA;
output   res_3_V_V_TVALID;
input   res_3_V_V_TREADY;
output  [31:0] res_4_V_V_TDATA;
output   res_4_V_V_TVALID;
input   res_4_V_V_TREADY;
output  [31:0] res_5_V_V_TDATA;
output   res_5_V_V_TVALID;
input   res_5_V_V_TREADY;
output  [31:0] res_6_V_V_TDATA;
output   res_6_V_V_TVALID;
input   res_6_V_V_TREADY;
output  [31:0] res_7_V_V_TDATA;
output   res_7_V_V_TVALID;
input   res_7_V_V_TREADY;
output  [31:0] res_8_V_V_TDATA;
output   res_8_V_V_TVALID;
input   res_8_V_V_TREADY;
output  [31:0] res_9_V_V_TDATA;
output   res_9_V_V_TVALID;
input   res_9_V_V_TREADY;
output  [31:0] res_10_V_V_TDATA;
output   res_10_V_V_TVALID;
input   res_10_V_V_TREADY;
output  [31:0] res_11_V_V_TDATA;
output   res_11_V_V_TVALID;
input   res_11_V_V_TREADY;
output  [31:0] res_12_V_V_TDATA;
output   res_12_V_V_TVALID;
input   res_12_V_V_TREADY;
output  [31:0] res_13_V_V_TDATA;
output   res_13_V_V_TVALID;
input   res_13_V_V_TREADY;
output  [31:0] res_14_V_V_TDATA;
output   res_14_V_V_TVALID;
input   res_14_V_V_TREADY;
output  [31:0] res_15_V_V_TDATA;
output   res_15_V_V_TVALID;
input   res_15_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data1_0_V_V_TREADY;
reg data1_1_V_V_TREADY;
reg data1_2_V_V_TREADY;
reg data1_3_V_V_TREADY;
reg data1_4_V_V_TREADY;
reg data1_5_V_V_TREADY;
reg data1_6_V_V_TREADY;
reg data1_7_V_V_TREADY;
reg data1_8_V_V_TREADY;
reg data1_9_V_V_TREADY;
reg data1_10_V_V_TREADY;
reg data1_11_V_V_TREADY;
reg data1_12_V_V_TREADY;
reg data1_13_V_V_TREADY;
reg data1_14_V_V_TREADY;
reg data1_15_V_V_TREADY;
reg data2_V_V_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data1_0_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln152_fu_672_p2;
reg    data1_1_V_V_TDATA_blk_n;
reg    data1_2_V_V_TDATA_blk_n;
reg    data1_3_V_V_TDATA_blk_n;
reg    data1_4_V_V_TDATA_blk_n;
reg    data1_5_V_V_TDATA_blk_n;
reg    data1_6_V_V_TDATA_blk_n;
reg    data1_7_V_V_TDATA_blk_n;
reg    data1_8_V_V_TDATA_blk_n;
reg    data1_9_V_V_TDATA_blk_n;
reg    data1_10_V_V_TDATA_blk_n;
reg    data1_11_V_V_TDATA_blk_n;
reg    data1_12_V_V_TDATA_blk_n;
reg    data1_13_V_V_TDATA_blk_n;
reg    data1_14_V_V_TDATA_blk_n;
reg    data1_15_V_V_TDATA_blk_n;
reg    data2_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln142_fu_510_p2;
reg    res_0_V_V_TDATA_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln152_reg_1763;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln152_reg_1763_pp1_iter1_reg;
reg    res_1_V_V_TDATA_blk_n;
reg    res_2_V_V_TDATA_blk_n;
reg    res_3_V_V_TDATA_blk_n;
reg    res_4_V_V_TDATA_blk_n;
reg    res_5_V_V_TDATA_blk_n;
reg    res_6_V_V_TDATA_blk_n;
reg    res_7_V_V_TDATA_blk_n;
reg    res_8_V_V_TDATA_blk_n;
reg    res_9_V_V_TDATA_blk_n;
reg    res_10_V_V_TDATA_blk_n;
reg    res_11_V_V_TDATA_blk_n;
reg    res_12_V_V_TDATA_blk_n;
reg    res_13_V_V_TDATA_blk_n;
reg    res_14_V_V_TDATA_blk_n;
reg    res_15_V_V_TDATA_blk_n;
reg   [11:0] i1_0_i_reg_499;
wire   [5:0] i_fu_516_p2;
reg    ap_block_state2;
wire   [1023:0] in_data2_V_fu_666_p2;
reg    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
reg    ap_block_state5_io;
wire    ap_block_state6_pp1_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp1_stage0_11001;
wire   [11:0] i_1_fu_678_p2;
wire   [47:0] mul_ln1265_fu_706_p2;
reg   [47:0] mul_ln1265_reg_1772;
reg   [31:0] tmp_5_reg_1777;
wire   [47:0] mul_ln1265_1_fu_750_p2;
reg   [47:0] mul_ln1265_1_reg_1782;
reg   [31:0] tmp_7_reg_1787;
wire   [47:0] mul_ln1265_2_fu_794_p2;
reg   [47:0] mul_ln1265_2_reg_1792;
reg   [31:0] tmp_9_reg_1797;
wire   [47:0] mul_ln1265_3_fu_838_p2;
reg   [47:0] mul_ln1265_3_reg_1802;
reg   [31:0] tmp_3_reg_1807;
wire   [47:0] mul_ln1265_4_fu_882_p2;
reg   [47:0] mul_ln1265_4_reg_1812;
reg   [31:0] tmp_10_reg_1817;
wire   [47:0] mul_ln1265_5_fu_926_p2;
reg   [47:0] mul_ln1265_5_reg_1822;
reg   [31:0] tmp_12_reg_1827;
wire   [47:0] mul_ln1265_6_fu_970_p2;
reg   [47:0] mul_ln1265_6_reg_1832;
reg   [31:0] tmp_14_reg_1837;
wire   [47:0] mul_ln1265_7_fu_1014_p2;
reg   [47:0] mul_ln1265_7_reg_1842;
reg   [31:0] tmp_16_reg_1847;
wire   [47:0] mul_ln1265_8_fu_1058_p2;
reg   [47:0] mul_ln1265_8_reg_1852;
reg   [31:0] tmp_18_reg_1857;
wire   [47:0] mul_ln1265_9_fu_1102_p2;
reg   [47:0] mul_ln1265_9_reg_1862;
reg   [31:0] tmp_20_reg_1867;
wire   [47:0] mul_ln1265_10_fu_1146_p2;
reg   [47:0] mul_ln1265_10_reg_1872;
reg   [31:0] tmp_22_reg_1877;
wire   [47:0] mul_ln1265_11_fu_1190_p2;
reg   [47:0] mul_ln1265_11_reg_1882;
reg   [31:0] tmp_24_reg_1887;
wire   [47:0] mul_ln1265_12_fu_1234_p2;
reg   [47:0] mul_ln1265_12_reg_1892;
reg   [31:0] tmp_26_reg_1897;
wire   [47:0] mul_ln1265_13_fu_1278_p2;
reg   [47:0] mul_ln1265_13_reg_1902;
reg   [31:0] tmp_28_reg_1907;
wire   [47:0] mul_ln1265_14_fu_1322_p2;
reg   [47:0] mul_ln1265_14_reg_1912;
reg   [31:0] tmp_30_reg_1917;
wire   [47:0] mul_ln1265_15_fu_1366_p2;
reg   [47:0] mul_ln1265_15_reg_1922;
reg   [31:0] tmp_32_reg_1927;
wire    ap_CS_fsm_state3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg   [1023:0] in_data2_V_043_reg_476;
reg   [5:0] i_0_i_reg_488;
reg    ap_block_state1;
reg    ap_block_pp1_stage0_01001;
wire   [4:0] trunc_ln203_fu_522_p1;
wire   [9:0] shl_ln_fu_526_p3;
wire   [9:0] empty_6_fu_534_p2;
wire   [10:0] zext_ln203_fu_546_p1;
wire   [0:0] icmp_ln203_fu_540_p2;
wire   [10:0] zext_ln203_1_fu_550_p1;
wire   [10:0] xor_ln203_fu_558_p2;
wire   [10:0] select_ln203_fu_564_p3;
wire   [10:0] select_ln203_2_fu_580_p3;
wire   [10:0] select_ln203_1_fu_572_p3;
wire   [10:0] xor_ln203_1_fu_588_p2;
wire   [1023:0] zext_ln203_2_fu_554_p1;
wire   [1023:0] zext_ln203_3_fu_594_p1;
wire   [1023:0] shl_ln203_fu_606_p2;
reg   [1023:0] tmp_2_fu_612_p4;
wire   [1023:0] zext_ln203_4_fu_598_p1;
wire   [1023:0] zext_ln203_5_fu_602_p1;
wire   [1023:0] shl_ln203_1_fu_630_p2;
wire   [1023:0] lshr_ln203_fu_636_p2;
wire   [1023:0] and_ln203_fu_642_p2;
wire   [1023:0] xor_ln203_2_fu_648_p2;
wire   [1023:0] select_ln203_3_fu_622_p3;
wire   [1023:0] and_ln203_1_fu_654_p2;
wire   [1023:0] and_ln203_2_fu_660_p2;
wire   [31:0] trunc_ln1265_fu_684_p1;
wire  signed [32:0] sext_ln1192_fu_688_p1;
wire   [32:0] add_ln1192_fu_692_p2;
wire  signed [32:0] mul_ln1265_fu_706_p0;
wire  signed [31:0] mul_ln1265_fu_706_p1;
wire   [31:0] tmp_4_fu_722_p4;
wire  signed [32:0] sext_ln1192_1_fu_732_p1;
wire   [32:0] add_ln1192_2_fu_736_p2;
wire  signed [32:0] mul_ln1265_1_fu_750_p0;
wire  signed [31:0] mul_ln1265_1_fu_750_p1;
wire   [31:0] tmp_6_fu_766_p4;
wire  signed [32:0] sext_ln1192_2_fu_776_p1;
wire   [32:0] add_ln1192_4_fu_780_p2;
wire  signed [32:0] mul_ln1265_2_fu_794_p0;
wire  signed [31:0] mul_ln1265_2_fu_794_p1;
wire   [31:0] tmp_8_fu_810_p4;
wire  signed [32:0] sext_ln1192_3_fu_820_p1;
wire   [32:0] add_ln1192_6_fu_824_p2;
wire  signed [32:0] mul_ln1265_3_fu_838_p0;
wire  signed [31:0] mul_ln1265_3_fu_838_p1;
wire   [31:0] tmp_s_fu_854_p4;
wire  signed [32:0] sext_ln1192_4_fu_864_p1;
wire   [32:0] add_ln1192_8_fu_868_p2;
wire  signed [32:0] mul_ln1265_4_fu_882_p0;
wire  signed [31:0] mul_ln1265_4_fu_882_p1;
wire   [31:0] tmp_11_fu_898_p4;
wire  signed [32:0] sext_ln1192_5_fu_908_p1;
wire   [32:0] add_ln1192_10_fu_912_p2;
wire  signed [32:0] mul_ln1265_5_fu_926_p0;
wire  signed [31:0] mul_ln1265_5_fu_926_p1;
wire   [31:0] tmp_13_fu_942_p4;
wire  signed [32:0] sext_ln1192_6_fu_952_p1;
wire   [32:0] add_ln1192_12_fu_956_p2;
wire  signed [32:0] mul_ln1265_6_fu_970_p0;
wire  signed [31:0] mul_ln1265_6_fu_970_p1;
wire   [31:0] tmp_15_fu_986_p4;
wire  signed [32:0] sext_ln1192_7_fu_996_p1;
wire   [32:0] add_ln1192_14_fu_1000_p2;
wire  signed [32:0] mul_ln1265_7_fu_1014_p0;
wire  signed [31:0] mul_ln1265_7_fu_1014_p1;
wire   [31:0] tmp_17_fu_1030_p4;
wire  signed [32:0] sext_ln1192_8_fu_1040_p1;
wire   [32:0] add_ln1192_16_fu_1044_p2;
wire  signed [32:0] mul_ln1265_8_fu_1058_p0;
wire  signed [31:0] mul_ln1265_8_fu_1058_p1;
wire   [31:0] tmp_19_fu_1074_p4;
wire  signed [32:0] sext_ln1192_9_fu_1084_p1;
wire   [32:0] add_ln1192_18_fu_1088_p2;
wire  signed [32:0] mul_ln1265_9_fu_1102_p0;
wire  signed [31:0] mul_ln1265_9_fu_1102_p1;
wire   [31:0] tmp_21_fu_1118_p4;
wire  signed [32:0] sext_ln1192_10_fu_1128_p1;
wire   [32:0] add_ln1192_20_fu_1132_p2;
wire  signed [32:0] mul_ln1265_10_fu_1146_p0;
wire  signed [31:0] mul_ln1265_10_fu_1146_p1;
wire   [31:0] tmp_23_fu_1162_p4;
wire  signed [32:0] sext_ln1192_11_fu_1172_p1;
wire   [32:0] add_ln1192_22_fu_1176_p2;
wire  signed [32:0] mul_ln1265_11_fu_1190_p0;
wire  signed [31:0] mul_ln1265_11_fu_1190_p1;
wire   [31:0] tmp_25_fu_1206_p4;
wire  signed [32:0] sext_ln1192_12_fu_1216_p1;
wire   [32:0] add_ln1192_24_fu_1220_p2;
wire  signed [32:0] mul_ln1265_12_fu_1234_p0;
wire  signed [31:0] mul_ln1265_12_fu_1234_p1;
wire   [31:0] tmp_27_fu_1250_p4;
wire  signed [32:0] sext_ln1192_13_fu_1260_p1;
wire   [32:0] add_ln1192_26_fu_1264_p2;
wire  signed [32:0] mul_ln1265_13_fu_1278_p0;
wire  signed [31:0] mul_ln1265_13_fu_1278_p1;
wire   [31:0] tmp_29_fu_1294_p4;
wire  signed [32:0] sext_ln1192_14_fu_1304_p1;
wire   [32:0] add_ln1192_28_fu_1308_p2;
wire  signed [32:0] mul_ln1265_14_fu_1322_p0;
wire  signed [31:0] mul_ln1265_14_fu_1322_p1;
wire   [31:0] tmp_31_fu_1338_p4;
wire  signed [32:0] sext_ln1192_15_fu_1348_p1;
wire   [32:0] add_ln1192_30_fu_1352_p2;
wire  signed [32:0] mul_ln1265_15_fu_1366_p0;
wire  signed [31:0] mul_ln1265_15_fu_1366_p1;
wire   [47:0] shl_ln1_fu_1382_p3;
wire   [47:0] add_ln1192_1_fu_1389_p2;
wire   [47:0] shl_ln728_1_fu_1405_p3;
wire   [47:0] add_ln1192_3_fu_1412_p2;
wire   [47:0] shl_ln728_2_fu_1428_p3;
wire   [47:0] add_ln1192_5_fu_1435_p2;
wire   [47:0] shl_ln728_3_fu_1451_p3;
wire   [47:0] add_ln1192_7_fu_1458_p2;
wire   [47:0] shl_ln728_4_fu_1474_p3;
wire   [47:0] add_ln1192_9_fu_1481_p2;
wire   [47:0] shl_ln728_5_fu_1497_p3;
wire   [47:0] add_ln1192_11_fu_1504_p2;
wire   [47:0] shl_ln728_6_fu_1520_p3;
wire   [47:0] add_ln1192_13_fu_1527_p2;
wire   [47:0] shl_ln728_7_fu_1543_p3;
wire   [47:0] add_ln1192_15_fu_1550_p2;
wire   [47:0] shl_ln728_8_fu_1566_p3;
wire   [47:0] add_ln1192_17_fu_1573_p2;
wire   [47:0] shl_ln728_9_fu_1589_p3;
wire   [47:0] add_ln1192_19_fu_1596_p2;
wire   [47:0] shl_ln728_s_fu_1612_p3;
wire   [47:0] add_ln1192_21_fu_1619_p2;
wire   [47:0] shl_ln728_10_fu_1635_p3;
wire   [47:0] add_ln1192_23_fu_1642_p2;
wire   [47:0] shl_ln728_11_fu_1658_p3;
wire   [47:0] add_ln1192_25_fu_1665_p2;
wire   [47:0] shl_ln728_12_fu_1681_p3;
wire   [47:0] add_ln1192_27_fu_1688_p2;
wire   [47:0] shl_ln728_13_fu_1704_p3;
wire   [47:0] add_ln1192_29_fu_1711_p2;
wire   [47:0] shl_ln728_14_fu_1727_p3;
wire   [47:0] add_ln1192_31_fu_1734_p2;
wire    ap_CS_fsm_state7;
wire    regslice_both_res_0_V_V_U_apdone_blk;
wire    regslice_both_res_1_V_V_U_apdone_blk;
wire    regslice_both_res_2_V_V_U_apdone_blk;
wire    regslice_both_res_3_V_V_U_apdone_blk;
wire    regslice_both_res_4_V_V_U_apdone_blk;
wire    regslice_both_res_5_V_V_U_apdone_blk;
wire    regslice_both_res_6_V_V_U_apdone_blk;
wire    regslice_both_res_7_V_V_U_apdone_blk;
wire    regslice_both_res_8_V_V_U_apdone_blk;
wire    regslice_both_res_9_V_V_U_apdone_blk;
wire    regslice_both_res_10_V_V_U_apdone_blk;
wire    regslice_both_res_11_V_V_U_apdone_blk;
wire    regslice_both_res_12_V_V_U_apdone_blk;
wire    regslice_both_res_13_V_V_U_apdone_blk;
wire    regslice_both_res_14_V_V_U_apdone_blk;
wire    regslice_both_res_15_V_V_U_apdone_blk;
reg    ap_block_state7;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire    regslice_both_data1_0_V_V_U_apdone_blk;
wire   [31:0] data1_0_V_V_TDATA_int;
wire    data1_0_V_V_TVALID_int;
reg    data1_0_V_V_TREADY_int;
wire    regslice_both_data1_0_V_V_U_ack_in;
wire    regslice_both_data1_1_V_V_U_apdone_blk;
wire   [31:0] data1_1_V_V_TDATA_int;
wire    data1_1_V_V_TVALID_int;
reg    data1_1_V_V_TREADY_int;
wire    regslice_both_data1_1_V_V_U_ack_in;
wire    regslice_both_data1_2_V_V_U_apdone_blk;
wire   [31:0] data1_2_V_V_TDATA_int;
wire    data1_2_V_V_TVALID_int;
reg    data1_2_V_V_TREADY_int;
wire    regslice_both_data1_2_V_V_U_ack_in;
wire    regslice_both_data1_3_V_V_U_apdone_blk;
wire   [31:0] data1_3_V_V_TDATA_int;
wire    data1_3_V_V_TVALID_int;
reg    data1_3_V_V_TREADY_int;
wire    regslice_both_data1_3_V_V_U_ack_in;
wire    regslice_both_data1_4_V_V_U_apdone_blk;
wire   [31:0] data1_4_V_V_TDATA_int;
wire    data1_4_V_V_TVALID_int;
reg    data1_4_V_V_TREADY_int;
wire    regslice_both_data1_4_V_V_U_ack_in;
wire    regslice_both_data1_5_V_V_U_apdone_blk;
wire   [31:0] data1_5_V_V_TDATA_int;
wire    data1_5_V_V_TVALID_int;
reg    data1_5_V_V_TREADY_int;
wire    regslice_both_data1_5_V_V_U_ack_in;
wire    regslice_both_data1_6_V_V_U_apdone_blk;
wire   [31:0] data1_6_V_V_TDATA_int;
wire    data1_6_V_V_TVALID_int;
reg    data1_6_V_V_TREADY_int;
wire    regslice_both_data1_6_V_V_U_ack_in;
wire    regslice_both_data1_7_V_V_U_apdone_blk;
wire   [31:0] data1_7_V_V_TDATA_int;
wire    data1_7_V_V_TVALID_int;
reg    data1_7_V_V_TREADY_int;
wire    regslice_both_data1_7_V_V_U_ack_in;
wire    regslice_both_data1_8_V_V_U_apdone_blk;
wire   [31:0] data1_8_V_V_TDATA_int;
wire    data1_8_V_V_TVALID_int;
reg    data1_8_V_V_TREADY_int;
wire    regslice_both_data1_8_V_V_U_ack_in;
wire    regslice_both_data1_9_V_V_U_apdone_blk;
wire   [31:0] data1_9_V_V_TDATA_int;
wire    data1_9_V_V_TVALID_int;
reg    data1_9_V_V_TREADY_int;
wire    regslice_both_data1_9_V_V_U_ack_in;
wire    regslice_both_data1_10_V_V_U_apdone_blk;
wire   [31:0] data1_10_V_V_TDATA_int;
wire    data1_10_V_V_TVALID_int;
reg    data1_10_V_V_TREADY_int;
wire    regslice_both_data1_10_V_V_U_ack_in;
wire    regslice_both_data1_11_V_V_U_apdone_blk;
wire   [31:0] data1_11_V_V_TDATA_int;
wire    data1_11_V_V_TVALID_int;
reg    data1_11_V_V_TREADY_int;
wire    regslice_both_data1_11_V_V_U_ack_in;
wire    regslice_both_data1_12_V_V_U_apdone_blk;
wire   [31:0] data1_12_V_V_TDATA_int;
wire    data1_12_V_V_TVALID_int;
reg    data1_12_V_V_TREADY_int;
wire    regslice_both_data1_12_V_V_U_ack_in;
wire    regslice_both_data1_13_V_V_U_apdone_blk;
wire   [31:0] data1_13_V_V_TDATA_int;
wire    data1_13_V_V_TVALID_int;
reg    data1_13_V_V_TREADY_int;
wire    regslice_both_data1_13_V_V_U_ack_in;
wire    regslice_both_data1_14_V_V_U_apdone_blk;
wire   [31:0] data1_14_V_V_TDATA_int;
wire    data1_14_V_V_TVALID_int;
reg    data1_14_V_V_TREADY_int;
wire    regslice_both_data1_14_V_V_U_ack_in;
wire    regslice_both_data1_15_V_V_U_apdone_blk;
wire   [31:0] data1_15_V_V_TDATA_int;
wire    data1_15_V_V_TVALID_int;
reg    data1_15_V_V_TREADY_int;
wire    regslice_both_data1_15_V_V_U_ack_in;
wire    regslice_both_data2_V_V_U_apdone_blk;
wire   [31:0] data2_V_V_TDATA_int;
wire    data2_V_V_TVALID_int;
reg    data2_V_V_TREADY_int;
wire    regslice_both_data2_V_V_U_ack_in;
wire   [31:0] res_0_V_V_TDATA_int;
reg    res_0_V_V_TVALID_int;
wire    res_0_V_V_TREADY_int;
wire    regslice_both_res_0_V_V_U_vld_out;
wire   [31:0] res_1_V_V_TDATA_int;
reg    res_1_V_V_TVALID_int;
wire    res_1_V_V_TREADY_int;
wire    regslice_both_res_1_V_V_U_vld_out;
wire   [31:0] res_2_V_V_TDATA_int;
reg    res_2_V_V_TVALID_int;
wire    res_2_V_V_TREADY_int;
wire    regslice_both_res_2_V_V_U_vld_out;
wire   [31:0] res_3_V_V_TDATA_int;
reg    res_3_V_V_TVALID_int;
wire    res_3_V_V_TREADY_int;
wire    regslice_both_res_3_V_V_U_vld_out;
wire   [31:0] res_4_V_V_TDATA_int;
reg    res_4_V_V_TVALID_int;
wire    res_4_V_V_TREADY_int;
wire    regslice_both_res_4_V_V_U_vld_out;
wire   [31:0] res_5_V_V_TDATA_int;
reg    res_5_V_V_TVALID_int;
wire    res_5_V_V_TREADY_int;
wire    regslice_both_res_5_V_V_U_vld_out;
wire   [31:0] res_6_V_V_TDATA_int;
reg    res_6_V_V_TVALID_int;
wire    res_6_V_V_TREADY_int;
wire    regslice_both_res_6_V_V_U_vld_out;
wire   [31:0] res_7_V_V_TDATA_int;
reg    res_7_V_V_TVALID_int;
wire    res_7_V_V_TREADY_int;
wire    regslice_both_res_7_V_V_U_vld_out;
wire   [31:0] res_8_V_V_TDATA_int;
reg    res_8_V_V_TVALID_int;
wire    res_8_V_V_TREADY_int;
wire    regslice_both_res_8_V_V_U_vld_out;
wire   [31:0] res_9_V_V_TDATA_int;
reg    res_9_V_V_TVALID_int;
wire    res_9_V_V_TREADY_int;
wire    regslice_both_res_9_V_V_U_vld_out;
wire   [31:0] res_10_V_V_TDATA_int;
reg    res_10_V_V_TVALID_int;
wire    res_10_V_V_TREADY_int;
wire    regslice_both_res_10_V_V_U_vld_out;
wire   [31:0] res_11_V_V_TDATA_int;
reg    res_11_V_V_TVALID_int;
wire    res_11_V_V_TREADY_int;
wire    regslice_both_res_11_V_V_U_vld_out;
wire   [31:0] res_12_V_V_TDATA_int;
reg    res_12_V_V_TVALID_int;
wire    res_12_V_V_TREADY_int;
wire    regslice_both_res_12_V_V_U_vld_out;
wire   [31:0] res_13_V_V_TDATA_int;
reg    res_13_V_V_TVALID_int;
wire    res_13_V_V_TREADY_int;
wire    regslice_both_res_13_V_V_U_vld_out;
wire   [31:0] res_14_V_V_TDATA_int;
reg    res_14_V_V_TVALID_int;
wire    res_14_V_V_TREADY_int;
wire    regslice_both_res_14_V_V_U_vld_out;
wire   [31:0] res_15_V_V_TDATA_int;
reg    res_15_V_V_TVALID_int;
wire    res_15_V_V_TREADY_int;
wire    regslice_both_res_15_V_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_0_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_0_V_V_TDATA),
    .vld_in(data1_0_V_V_TVALID),
    .ack_in(regslice_both_data1_0_V_V_U_ack_in),
    .data_out(data1_0_V_V_TDATA_int),
    .vld_out(data1_0_V_V_TVALID_int),
    .ack_out(data1_0_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_0_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_1_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_1_V_V_TDATA),
    .vld_in(data1_1_V_V_TVALID),
    .ack_in(regslice_both_data1_1_V_V_U_ack_in),
    .data_out(data1_1_V_V_TDATA_int),
    .vld_out(data1_1_V_V_TVALID_int),
    .ack_out(data1_1_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_1_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_2_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_2_V_V_TDATA),
    .vld_in(data1_2_V_V_TVALID),
    .ack_in(regslice_both_data1_2_V_V_U_ack_in),
    .data_out(data1_2_V_V_TDATA_int),
    .vld_out(data1_2_V_V_TVALID_int),
    .ack_out(data1_2_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_2_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_3_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_3_V_V_TDATA),
    .vld_in(data1_3_V_V_TVALID),
    .ack_in(regslice_both_data1_3_V_V_U_ack_in),
    .data_out(data1_3_V_V_TDATA_int),
    .vld_out(data1_3_V_V_TVALID_int),
    .ack_out(data1_3_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_3_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_4_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_4_V_V_TDATA),
    .vld_in(data1_4_V_V_TVALID),
    .ack_in(regslice_both_data1_4_V_V_U_ack_in),
    .data_out(data1_4_V_V_TDATA_int),
    .vld_out(data1_4_V_V_TVALID_int),
    .ack_out(data1_4_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_4_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_5_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_5_V_V_TDATA),
    .vld_in(data1_5_V_V_TVALID),
    .ack_in(regslice_both_data1_5_V_V_U_ack_in),
    .data_out(data1_5_V_V_TDATA_int),
    .vld_out(data1_5_V_V_TVALID_int),
    .ack_out(data1_5_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_5_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_6_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_6_V_V_TDATA),
    .vld_in(data1_6_V_V_TVALID),
    .ack_in(regslice_both_data1_6_V_V_U_ack_in),
    .data_out(data1_6_V_V_TDATA_int),
    .vld_out(data1_6_V_V_TVALID_int),
    .ack_out(data1_6_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_6_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_7_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_7_V_V_TDATA),
    .vld_in(data1_7_V_V_TVALID),
    .ack_in(regslice_both_data1_7_V_V_U_ack_in),
    .data_out(data1_7_V_V_TDATA_int),
    .vld_out(data1_7_V_V_TVALID_int),
    .ack_out(data1_7_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_7_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_8_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_8_V_V_TDATA),
    .vld_in(data1_8_V_V_TVALID),
    .ack_in(regslice_both_data1_8_V_V_U_ack_in),
    .data_out(data1_8_V_V_TDATA_int),
    .vld_out(data1_8_V_V_TVALID_int),
    .ack_out(data1_8_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_8_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_9_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_9_V_V_TDATA),
    .vld_in(data1_9_V_V_TVALID),
    .ack_in(regslice_both_data1_9_V_V_U_ack_in),
    .data_out(data1_9_V_V_TDATA_int),
    .vld_out(data1_9_V_V_TVALID_int),
    .ack_out(data1_9_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_9_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_10_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_10_V_V_TDATA),
    .vld_in(data1_10_V_V_TVALID),
    .ack_in(regslice_both_data1_10_V_V_U_ack_in),
    .data_out(data1_10_V_V_TDATA_int),
    .vld_out(data1_10_V_V_TVALID_int),
    .ack_out(data1_10_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_10_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_11_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_11_V_V_TDATA),
    .vld_in(data1_11_V_V_TVALID),
    .ack_in(regslice_both_data1_11_V_V_U_ack_in),
    .data_out(data1_11_V_V_TDATA_int),
    .vld_out(data1_11_V_V_TVALID_int),
    .ack_out(data1_11_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_11_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_12_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_12_V_V_TDATA),
    .vld_in(data1_12_V_V_TVALID),
    .ack_in(regslice_both_data1_12_V_V_U_ack_in),
    .data_out(data1_12_V_V_TDATA_int),
    .vld_out(data1_12_V_V_TVALID_int),
    .ack_out(data1_12_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_12_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_13_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_13_V_V_TDATA),
    .vld_in(data1_13_V_V_TVALID),
    .ack_in(regslice_both_data1_13_V_V_U_ack_in),
    .data_out(data1_13_V_V_TDATA_int),
    .vld_out(data1_13_V_V_TVALID_int),
    .ack_out(data1_13_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_13_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_14_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_14_V_V_TDATA),
    .vld_in(data1_14_V_V_TVALID),
    .ack_in(regslice_both_data1_14_V_V_U_ack_in),
    .data_out(data1_14_V_V_TDATA_int),
    .vld_out(data1_14_V_V_TVALID_int),
    .ack_out(data1_14_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_14_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data1_15_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data1_15_V_V_TDATA),
    .vld_in(data1_15_V_V_TVALID),
    .ack_in(regslice_both_data1_15_V_V_U_ack_in),
    .data_out(data1_15_V_V_TDATA_int),
    .vld_out(data1_15_V_V_TVALID_int),
    .ack_out(data1_15_V_V_TREADY_int),
    .apdone_blk(regslice_both_data1_15_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data2_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data2_V_V_TDATA),
    .vld_in(data2_V_V_TVALID),
    .ack_in(regslice_both_data2_V_V_U_ack_in),
    .data_out(data2_V_V_TDATA_int),
    .vld_out(data2_V_V_TVALID_int),
    .ack_out(data2_V_V_TREADY_int),
    .apdone_blk(regslice_both_data2_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_0_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_0_V_V_TDATA_int),
    .vld_in(res_0_V_V_TVALID_int),
    .ack_in(res_0_V_V_TREADY_int),
    .data_out(res_0_V_V_TDATA),
    .vld_out(regslice_both_res_0_V_V_U_vld_out),
    .ack_out(res_0_V_V_TREADY),
    .apdone_blk(regslice_both_res_0_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_1_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_1_V_V_TDATA_int),
    .vld_in(res_1_V_V_TVALID_int),
    .ack_in(res_1_V_V_TREADY_int),
    .data_out(res_1_V_V_TDATA),
    .vld_out(regslice_both_res_1_V_V_U_vld_out),
    .ack_out(res_1_V_V_TREADY),
    .apdone_blk(regslice_both_res_1_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_2_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_2_V_V_TDATA_int),
    .vld_in(res_2_V_V_TVALID_int),
    .ack_in(res_2_V_V_TREADY_int),
    .data_out(res_2_V_V_TDATA),
    .vld_out(regslice_both_res_2_V_V_U_vld_out),
    .ack_out(res_2_V_V_TREADY),
    .apdone_blk(regslice_both_res_2_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_3_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_3_V_V_TDATA_int),
    .vld_in(res_3_V_V_TVALID_int),
    .ack_in(res_3_V_V_TREADY_int),
    .data_out(res_3_V_V_TDATA),
    .vld_out(regslice_both_res_3_V_V_U_vld_out),
    .ack_out(res_3_V_V_TREADY),
    .apdone_blk(regslice_both_res_3_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_4_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_4_V_V_TDATA_int),
    .vld_in(res_4_V_V_TVALID_int),
    .ack_in(res_4_V_V_TREADY_int),
    .data_out(res_4_V_V_TDATA),
    .vld_out(regslice_both_res_4_V_V_U_vld_out),
    .ack_out(res_4_V_V_TREADY),
    .apdone_blk(regslice_both_res_4_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_5_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_5_V_V_TDATA_int),
    .vld_in(res_5_V_V_TVALID_int),
    .ack_in(res_5_V_V_TREADY_int),
    .data_out(res_5_V_V_TDATA),
    .vld_out(regslice_both_res_5_V_V_U_vld_out),
    .ack_out(res_5_V_V_TREADY),
    .apdone_blk(regslice_both_res_5_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_6_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_6_V_V_TDATA_int),
    .vld_in(res_6_V_V_TVALID_int),
    .ack_in(res_6_V_V_TREADY_int),
    .data_out(res_6_V_V_TDATA),
    .vld_out(regslice_both_res_6_V_V_U_vld_out),
    .ack_out(res_6_V_V_TREADY),
    .apdone_blk(regslice_both_res_6_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_7_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_7_V_V_TDATA_int),
    .vld_in(res_7_V_V_TVALID_int),
    .ack_in(res_7_V_V_TREADY_int),
    .data_out(res_7_V_V_TDATA),
    .vld_out(regslice_both_res_7_V_V_U_vld_out),
    .ack_out(res_7_V_V_TREADY),
    .apdone_blk(regslice_both_res_7_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_8_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_8_V_V_TDATA_int),
    .vld_in(res_8_V_V_TVALID_int),
    .ack_in(res_8_V_V_TREADY_int),
    .data_out(res_8_V_V_TDATA),
    .vld_out(regslice_both_res_8_V_V_U_vld_out),
    .ack_out(res_8_V_V_TREADY),
    .apdone_blk(regslice_both_res_8_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_9_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_9_V_V_TDATA_int),
    .vld_in(res_9_V_V_TVALID_int),
    .ack_in(res_9_V_V_TREADY_int),
    .data_out(res_9_V_V_TDATA),
    .vld_out(regslice_both_res_9_V_V_U_vld_out),
    .ack_out(res_9_V_V_TREADY),
    .apdone_blk(regslice_both_res_9_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_10_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_10_V_V_TDATA_int),
    .vld_in(res_10_V_V_TVALID_int),
    .ack_in(res_10_V_V_TREADY_int),
    .data_out(res_10_V_V_TDATA),
    .vld_out(regslice_both_res_10_V_V_U_vld_out),
    .ack_out(res_10_V_V_TREADY),
    .apdone_blk(regslice_both_res_10_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_11_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_11_V_V_TDATA_int),
    .vld_in(res_11_V_V_TVALID_int),
    .ack_in(res_11_V_V_TREADY_int),
    .data_out(res_11_V_V_TDATA),
    .vld_out(regslice_both_res_11_V_V_U_vld_out),
    .ack_out(res_11_V_V_TREADY),
    .apdone_blk(regslice_both_res_11_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_12_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_12_V_V_TDATA_int),
    .vld_in(res_12_V_V_TVALID_int),
    .ack_in(res_12_V_V_TREADY_int),
    .data_out(res_12_V_V_TDATA),
    .vld_out(regslice_both_res_12_V_V_U_vld_out),
    .ack_out(res_12_V_V_TREADY),
    .apdone_blk(regslice_both_res_12_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_13_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_13_V_V_TDATA_int),
    .vld_in(res_13_V_V_TVALID_int),
    .ack_in(res_13_V_V_TREADY_int),
    .data_out(res_13_V_V_TDATA),
    .vld_out(regslice_both_res_13_V_V_U_vld_out),
    .ack_out(res_13_V_V_TREADY),
    .apdone_blk(regslice_both_res_13_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_14_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_14_V_V_TDATA_int),
    .vld_in(res_14_V_V_TVALID_int),
    .ack_in(res_14_V_V_TREADY_int),
    .data_out(res_14_V_V_TDATA),
    .vld_out(regslice_both_res_14_V_V_U_vld_out),
    .ack_out(res_14_V_V_TREADY),
    .apdone_blk(regslice_both_res_14_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_15_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_15_V_V_TDATA_int),
    .vld_in(res_15_V_V_TVALID_int),
    .ack_in(res_15_V_V_TREADY_int),
    .data_out(res_15_V_V_TDATA),
    .vld_out(regslice_both_res_15_V_V_U_vld_out),
    .ack_out(res_15_V_V_TREADY),
    .apdone_blk(regslice_both_res_15_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((regslice_both_res_15_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_14_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_13_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_12_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_11_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_10_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_9_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_8_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state4)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i1_0_i_reg_499 <= 12'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        i1_0_i_reg_499 <= i_1_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data2_V_V_TVALID_int == 1'b0) & (icmp_ln142_fu_510_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln142_fu_510_p2 == 1'd0))) begin
        i_0_i_reg_488 <= i_fu_516_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_488 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln152_reg_1763 <= icmp_ln152_fu_672_p2;
        icmp_ln152_reg_1763_pp1_iter1_reg <= icmp_ln152_reg_1763;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data2_V_V_TVALID_int == 1'b0) & (icmp_ln142_fu_510_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln142_fu_510_p2 == 1'd0))) begin
        in_data2_V_043_reg_476 <= in_data2_V_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        mul_ln1265_10_reg_1872 <= mul_ln1265_10_fu_1146_p2;
        mul_ln1265_11_reg_1882 <= mul_ln1265_11_fu_1190_p2;
        mul_ln1265_12_reg_1892 <= mul_ln1265_12_fu_1234_p2;
        mul_ln1265_13_reg_1902 <= mul_ln1265_13_fu_1278_p2;
        mul_ln1265_14_reg_1912 <= mul_ln1265_14_fu_1322_p2;
        mul_ln1265_15_reg_1922 <= mul_ln1265_15_fu_1366_p2;
        mul_ln1265_1_reg_1782 <= mul_ln1265_1_fu_750_p2;
        mul_ln1265_2_reg_1792 <= mul_ln1265_2_fu_794_p2;
        mul_ln1265_3_reg_1802 <= mul_ln1265_3_fu_838_p2;
        mul_ln1265_4_reg_1812 <= mul_ln1265_4_fu_882_p2;
        mul_ln1265_5_reg_1822 <= mul_ln1265_5_fu_926_p2;
        mul_ln1265_6_reg_1832 <= mul_ln1265_6_fu_970_p2;
        mul_ln1265_7_reg_1842 <= mul_ln1265_7_fu_1014_p2;
        mul_ln1265_8_reg_1852 <= mul_ln1265_8_fu_1058_p2;
        mul_ln1265_9_reg_1862 <= mul_ln1265_9_fu_1102_p2;
        mul_ln1265_reg_1772 <= mul_ln1265_fu_706_p2;
        tmp_10_reg_1817 <= {{in_data2_V_043_reg_476[671:640]}};
        tmp_12_reg_1827 <= {{in_data2_V_043_reg_476[703:672]}};
        tmp_14_reg_1837 <= {{in_data2_V_043_reg_476[735:704]}};
        tmp_16_reg_1847 <= {{in_data2_V_043_reg_476[767:736]}};
        tmp_18_reg_1857 <= {{in_data2_V_043_reg_476[799:768]}};
        tmp_20_reg_1867 <= {{in_data2_V_043_reg_476[831:800]}};
        tmp_22_reg_1877 <= {{in_data2_V_043_reg_476[863:832]}};
        tmp_24_reg_1887 <= {{in_data2_V_043_reg_476[895:864]}};
        tmp_26_reg_1897 <= {{in_data2_V_043_reg_476[927:896]}};
        tmp_28_reg_1907 <= {{in_data2_V_043_reg_476[959:928]}};
        tmp_30_reg_1917 <= {{in_data2_V_043_reg_476[991:960]}};
        tmp_32_reg_1927 <= {{in_data2_V_043_reg_476[1023:992]}};
        tmp_3_reg_1807 <= {{in_data2_V_043_reg_476[639:608]}};
        tmp_5_reg_1777 <= {{in_data2_V_043_reg_476[543:512]}};
        tmp_7_reg_1787 <= {{in_data2_V_043_reg_476[575:544]}};
        tmp_9_reg_1797 <= {{in_data2_V_043_reg_476[607:576]}};
    end
end

always @ (*) begin
    if ((icmp_ln152_fu_672_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_res_15_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_14_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_13_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_12_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_11_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_10_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_9_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_8_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_res_15_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_14_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_13_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_12_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_11_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_10_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_9_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_8_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_0_V_V_TDATA_blk_n = data1_0_V_V_TVALID_int;
    end else begin
        data1_0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_0_V_V_TVALID == 1'b1) & (regslice_both_data1_0_V_V_U_ack_in == 1'b1))) begin
        data1_0_V_V_TREADY = 1'b1;
    end else begin
        data1_0_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_0_V_V_TREADY_int = 1'b1;
    end else begin
        data1_0_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_10_V_V_TDATA_blk_n = data1_10_V_V_TVALID_int;
    end else begin
        data1_10_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_10_V_V_TVALID == 1'b1) & (regslice_both_data1_10_V_V_U_ack_in == 1'b1))) begin
        data1_10_V_V_TREADY = 1'b1;
    end else begin
        data1_10_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_10_V_V_TREADY_int = 1'b1;
    end else begin
        data1_10_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_11_V_V_TDATA_blk_n = data1_11_V_V_TVALID_int;
    end else begin
        data1_11_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_11_V_V_TVALID == 1'b1) & (regslice_both_data1_11_V_V_U_ack_in == 1'b1))) begin
        data1_11_V_V_TREADY = 1'b1;
    end else begin
        data1_11_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_11_V_V_TREADY_int = 1'b1;
    end else begin
        data1_11_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_12_V_V_TDATA_blk_n = data1_12_V_V_TVALID_int;
    end else begin
        data1_12_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_12_V_V_TVALID == 1'b1) & (regslice_both_data1_12_V_V_U_ack_in == 1'b1))) begin
        data1_12_V_V_TREADY = 1'b1;
    end else begin
        data1_12_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_12_V_V_TREADY_int = 1'b1;
    end else begin
        data1_12_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_13_V_V_TDATA_blk_n = data1_13_V_V_TVALID_int;
    end else begin
        data1_13_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_13_V_V_TVALID == 1'b1) & (regslice_both_data1_13_V_V_U_ack_in == 1'b1))) begin
        data1_13_V_V_TREADY = 1'b1;
    end else begin
        data1_13_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_13_V_V_TREADY_int = 1'b1;
    end else begin
        data1_13_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_14_V_V_TDATA_blk_n = data1_14_V_V_TVALID_int;
    end else begin
        data1_14_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_14_V_V_TVALID == 1'b1) & (regslice_both_data1_14_V_V_U_ack_in == 1'b1))) begin
        data1_14_V_V_TREADY = 1'b1;
    end else begin
        data1_14_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_14_V_V_TREADY_int = 1'b1;
    end else begin
        data1_14_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_15_V_V_TDATA_blk_n = data1_15_V_V_TVALID_int;
    end else begin
        data1_15_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_15_V_V_TVALID == 1'b1) & (regslice_both_data1_15_V_V_U_ack_in == 1'b1))) begin
        data1_15_V_V_TREADY = 1'b1;
    end else begin
        data1_15_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_15_V_V_TREADY_int = 1'b1;
    end else begin
        data1_15_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_1_V_V_TDATA_blk_n = data1_1_V_V_TVALID_int;
    end else begin
        data1_1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_1_V_V_TVALID == 1'b1) & (regslice_both_data1_1_V_V_U_ack_in == 1'b1))) begin
        data1_1_V_V_TREADY = 1'b1;
    end else begin
        data1_1_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_1_V_V_TREADY_int = 1'b1;
    end else begin
        data1_1_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_2_V_V_TDATA_blk_n = data1_2_V_V_TVALID_int;
    end else begin
        data1_2_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_2_V_V_TVALID == 1'b1) & (regslice_both_data1_2_V_V_U_ack_in == 1'b1))) begin
        data1_2_V_V_TREADY = 1'b1;
    end else begin
        data1_2_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_2_V_V_TREADY_int = 1'b1;
    end else begin
        data1_2_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_3_V_V_TDATA_blk_n = data1_3_V_V_TVALID_int;
    end else begin
        data1_3_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_3_V_V_TVALID == 1'b1) & (regslice_both_data1_3_V_V_U_ack_in == 1'b1))) begin
        data1_3_V_V_TREADY = 1'b1;
    end else begin
        data1_3_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_3_V_V_TREADY_int = 1'b1;
    end else begin
        data1_3_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_4_V_V_TDATA_blk_n = data1_4_V_V_TVALID_int;
    end else begin
        data1_4_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_4_V_V_TVALID == 1'b1) & (regslice_both_data1_4_V_V_U_ack_in == 1'b1))) begin
        data1_4_V_V_TREADY = 1'b1;
    end else begin
        data1_4_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_4_V_V_TREADY_int = 1'b1;
    end else begin
        data1_4_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_5_V_V_TDATA_blk_n = data1_5_V_V_TVALID_int;
    end else begin
        data1_5_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_5_V_V_TVALID == 1'b1) & (regslice_both_data1_5_V_V_U_ack_in == 1'b1))) begin
        data1_5_V_V_TREADY = 1'b1;
    end else begin
        data1_5_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_5_V_V_TREADY_int = 1'b1;
    end else begin
        data1_5_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_6_V_V_TDATA_blk_n = data1_6_V_V_TVALID_int;
    end else begin
        data1_6_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_6_V_V_TVALID == 1'b1) & (regslice_both_data1_6_V_V_U_ack_in == 1'b1))) begin
        data1_6_V_V_TREADY = 1'b1;
    end else begin
        data1_6_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_6_V_V_TREADY_int = 1'b1;
    end else begin
        data1_6_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_7_V_V_TDATA_blk_n = data1_7_V_V_TVALID_int;
    end else begin
        data1_7_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_7_V_V_TVALID == 1'b1) & (regslice_both_data1_7_V_V_U_ack_in == 1'b1))) begin
        data1_7_V_V_TREADY = 1'b1;
    end else begin
        data1_7_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_7_V_V_TREADY_int = 1'b1;
    end else begin
        data1_7_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_8_V_V_TDATA_blk_n = data1_8_V_V_TVALID_int;
    end else begin
        data1_8_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_8_V_V_TVALID == 1'b1) & (regslice_both_data1_8_V_V_U_ack_in == 1'b1))) begin
        data1_8_V_V_TREADY = 1'b1;
    end else begin
        data1_8_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_8_V_V_TREADY_int = 1'b1;
    end else begin
        data1_8_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0))) begin
        data1_9_V_V_TDATA_blk_n = data1_9_V_V_TVALID_int;
    end else begin
        data1_9_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data1_9_V_V_TVALID == 1'b1) & (regslice_both_data1_9_V_V_U_ack_in == 1'b1))) begin
        data1_9_V_V_TREADY = 1'b1;
    end else begin
        data1_9_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_fu_672_p2 == 1'd0))) begin
        data1_9_V_V_TREADY_int = 1'b1;
    end else begin
        data1_9_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln142_fu_510_p2 == 1'd0))) begin
        data2_V_V_TDATA_blk_n = data2_V_V_TVALID_int;
    end else begin
        data2_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((data2_V_V_TVALID == 1'b1) & (regslice_both_data2_V_V_U_ack_in == 1'b1))) begin
        data2_V_V_TREADY = 1'b1;
    end else begin
        data2_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((data2_V_V_TVALID_int == 1'b0) & (icmp_ln142_fu_510_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln142_fu_510_p2 == 1'd0))) begin
        data2_V_V_TREADY_int = 1'b1;
    end else begin
        data2_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_0_V_V_TDATA_blk_n = res_0_V_V_TREADY_int;
    end else begin
        res_0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_0_V_V_TVALID_int = 1'b1;
    end else begin
        res_0_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_10_V_V_TDATA_blk_n = res_10_V_V_TREADY_int;
    end else begin
        res_10_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_10_V_V_TVALID_int = 1'b1;
    end else begin
        res_10_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_11_V_V_TDATA_blk_n = res_11_V_V_TREADY_int;
    end else begin
        res_11_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_11_V_V_TVALID_int = 1'b1;
    end else begin
        res_11_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_12_V_V_TDATA_blk_n = res_12_V_V_TREADY_int;
    end else begin
        res_12_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_12_V_V_TVALID_int = 1'b1;
    end else begin
        res_12_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_13_V_V_TDATA_blk_n = res_13_V_V_TREADY_int;
    end else begin
        res_13_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_13_V_V_TVALID_int = 1'b1;
    end else begin
        res_13_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_14_V_V_TDATA_blk_n = res_14_V_V_TREADY_int;
    end else begin
        res_14_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_14_V_V_TVALID_int = 1'b1;
    end else begin
        res_14_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_15_V_V_TDATA_blk_n = res_15_V_V_TREADY_int;
    end else begin
        res_15_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_15_V_V_TVALID_int = 1'b1;
    end else begin
        res_15_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_1_V_V_TDATA_blk_n = res_1_V_V_TREADY_int;
    end else begin
        res_1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_1_V_V_TVALID_int = 1'b1;
    end else begin
        res_1_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_2_V_V_TDATA_blk_n = res_2_V_V_TREADY_int;
    end else begin
        res_2_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_2_V_V_TVALID_int = 1'b1;
    end else begin
        res_2_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_3_V_V_TDATA_blk_n = res_3_V_V_TREADY_int;
    end else begin
        res_3_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_3_V_V_TVALID_int = 1'b1;
    end else begin
        res_3_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_4_V_V_TDATA_blk_n = res_4_V_V_TREADY_int;
    end else begin
        res_4_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_4_V_V_TVALID_int = 1'b1;
    end else begin
        res_4_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_5_V_V_TDATA_blk_n = res_5_V_V_TREADY_int;
    end else begin
        res_5_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_5_V_V_TVALID_int = 1'b1;
    end else begin
        res_5_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_6_V_V_TDATA_blk_n = res_6_V_V_TREADY_int;
    end else begin
        res_6_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_6_V_V_TVALID_int = 1'b1;
    end else begin
        res_6_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_7_V_V_TDATA_blk_n = res_7_V_V_TREADY_int;
    end else begin
        res_7_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_7_V_V_TVALID_int = 1'b1;
    end else begin
        res_7_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_8_V_V_TDATA_blk_n = res_8_V_V_TREADY_int;
    end else begin
        res_8_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_8_V_V_TVALID_int = 1'b1;
    end else begin
        res_8_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0) & (1'b0 == ap_block_pp1_stage0)))) begin
        res_9_V_V_TDATA_blk_n = res_9_V_V_TREADY_int;
    end else begin
        res_9_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln152_reg_1763 == 1'd0))) begin
        res_9_V_V_TVALID_int = 1'b1;
    end else begin
        res_9_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((data2_V_V_TVALID_int == 1'b0) & (icmp_ln142_fu_510_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln142_fu_510_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((data2_V_V_TVALID_int == 1'b0) & (icmp_ln142_fu_510_p2 == 1'd0)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln142_fu_510_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if ((~((regslice_both_res_15_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_14_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_13_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_12_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_11_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_10_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_9_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_8_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_10_fu_912_p2 = ($signed(33'd65536) + $signed(sext_ln1192_5_fu_908_p1));

assign add_ln1192_11_fu_1504_p2 = (mul_ln1265_5_reg_1822 + shl_ln728_5_fu_1497_p3);

assign add_ln1192_12_fu_956_p2 = ($signed(33'd65536) + $signed(sext_ln1192_6_fu_952_p1));

assign add_ln1192_13_fu_1527_p2 = (mul_ln1265_6_reg_1832 + shl_ln728_6_fu_1520_p3);

assign add_ln1192_14_fu_1000_p2 = ($signed(33'd65536) + $signed(sext_ln1192_7_fu_996_p1));

assign add_ln1192_15_fu_1550_p2 = (mul_ln1265_7_reg_1842 + shl_ln728_7_fu_1543_p3);

assign add_ln1192_16_fu_1044_p2 = ($signed(33'd65536) + $signed(sext_ln1192_8_fu_1040_p1));

assign add_ln1192_17_fu_1573_p2 = (mul_ln1265_8_reg_1852 + shl_ln728_8_fu_1566_p3);

assign add_ln1192_18_fu_1088_p2 = ($signed(33'd65536) + $signed(sext_ln1192_9_fu_1084_p1));

assign add_ln1192_19_fu_1596_p2 = (mul_ln1265_9_reg_1862 + shl_ln728_9_fu_1589_p3);

assign add_ln1192_1_fu_1389_p2 = (mul_ln1265_reg_1772 + shl_ln1_fu_1382_p3);

assign add_ln1192_20_fu_1132_p2 = ($signed(33'd65536) + $signed(sext_ln1192_10_fu_1128_p1));

assign add_ln1192_21_fu_1619_p2 = (mul_ln1265_10_reg_1872 + shl_ln728_s_fu_1612_p3);

assign add_ln1192_22_fu_1176_p2 = ($signed(33'd65536) + $signed(sext_ln1192_11_fu_1172_p1));

assign add_ln1192_23_fu_1642_p2 = (mul_ln1265_11_reg_1882 + shl_ln728_10_fu_1635_p3);

assign add_ln1192_24_fu_1220_p2 = ($signed(33'd65536) + $signed(sext_ln1192_12_fu_1216_p1));

assign add_ln1192_25_fu_1665_p2 = (mul_ln1265_12_reg_1892 + shl_ln728_11_fu_1658_p3);

assign add_ln1192_26_fu_1264_p2 = ($signed(33'd65536) + $signed(sext_ln1192_13_fu_1260_p1));

assign add_ln1192_27_fu_1688_p2 = (mul_ln1265_13_reg_1902 + shl_ln728_12_fu_1681_p3);

assign add_ln1192_28_fu_1308_p2 = ($signed(33'd65536) + $signed(sext_ln1192_14_fu_1304_p1));

assign add_ln1192_29_fu_1711_p2 = (mul_ln1265_14_reg_1912 + shl_ln728_13_fu_1704_p3);

assign add_ln1192_2_fu_736_p2 = ($signed(33'd65536) + $signed(sext_ln1192_1_fu_732_p1));

assign add_ln1192_30_fu_1352_p2 = ($signed(33'd65536) + $signed(sext_ln1192_15_fu_1348_p1));

assign add_ln1192_31_fu_1734_p2 = (mul_ln1265_15_reg_1922 + shl_ln728_14_fu_1727_p3);

assign add_ln1192_3_fu_1412_p2 = (mul_ln1265_1_reg_1782 + shl_ln728_1_fu_1405_p3);

assign add_ln1192_4_fu_780_p2 = ($signed(33'd65536) + $signed(sext_ln1192_2_fu_776_p1));

assign add_ln1192_5_fu_1435_p2 = (mul_ln1265_2_reg_1792 + shl_ln728_2_fu_1428_p3);

assign add_ln1192_6_fu_824_p2 = ($signed(33'd65536) + $signed(sext_ln1192_3_fu_820_p1));

assign add_ln1192_7_fu_1458_p2 = (mul_ln1265_3_reg_1802 + shl_ln728_3_fu_1451_p3);

assign add_ln1192_8_fu_868_p2 = ($signed(33'd65536) + $signed(sext_ln1192_4_fu_864_p1));

assign add_ln1192_9_fu_1481_p2 = (mul_ln1265_4_reg_1812 + shl_ln728_4_fu_1474_p3);

assign add_ln1192_fu_692_p2 = ($signed(33'd65536) + $signed(sext_ln1192_fu_688_p1));

assign and_ln203_1_fu_654_p2 = (xor_ln203_2_fu_648_p2 & in_data2_V_043_reg_476);

assign and_ln203_2_fu_660_p2 = (select_ln203_3_fu_622_p3 & and_ln203_fu_642_p2);

assign and_ln203_fu_642_p2 = (shl_ln203_1_fu_630_p2 & lshr_ln203_fu_636_p2);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (((data1_15_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_14_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_13_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_12_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_11_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_10_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_9_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_8_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_7_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_6_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_5_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_4_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_3_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_2_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_1_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_0_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (((data1_15_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_14_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_13_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_12_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_11_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_10_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_9_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_8_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_7_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_6_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_5_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_4_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_3_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_2_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_1_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_0_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (((data1_15_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_14_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_13_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_12_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_11_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_10_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_9_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_8_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_7_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_6_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_5_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_4_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_3_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_2_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_1_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_0_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((data2_V_V_TVALID_int == 1'b0) & (icmp_ln142_fu_510_p2 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp1_stage0_iter0 = (((data1_15_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_14_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_13_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_12_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_11_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_10_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_9_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_8_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_7_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_6_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_5_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_4_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_3_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_2_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_1_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)) | ((data1_0_V_V_TVALID_int == 1'b0) & (icmp_ln152_fu_672_p2 == 1'd0)));
end

always @ (*) begin
    ap_block_state5_io = (((res_15_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_14_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_13_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_12_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_11_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_10_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_9_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_8_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_7_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_6_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_5_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_4_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_3_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_2_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_1_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)) | ((res_0_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763 == 1'd0)));
end

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = (((res_15_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_14_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_13_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_12_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_11_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_10_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_9_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_8_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_7_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_6_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_5_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_4_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_3_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_2_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_1_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)) | ((res_0_V_V_TREADY_int == 1'b0) & (icmp_ln152_reg_1763_pp1_iter1_reg == 1'd0)));
end

assign ap_block_state6_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7 = ((regslice_both_res_15_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_14_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_13_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_12_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_11_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_10_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_9_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_8_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign empty_6_fu_534_p2 = (shl_ln_fu_526_p3 | 10'd31);

assign i_1_fu_678_p2 = (i1_0_i_reg_499 + 12'd1);

assign i_fu_516_p2 = (i_0_i_reg_488 + 6'd1);

assign icmp_ln142_fu_510_p2 = ((i_0_i_reg_488 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_672_p2 = ((i1_0_i_reg_499 == 12'd3080) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_540_p2 = ((shl_ln_fu_526_p3 > empty_6_fu_534_p2) ? 1'b1 : 1'b0);

assign in_data2_V_fu_666_p2 = (and_ln203_2_fu_660_p2 | and_ln203_1_fu_654_p2);

assign lshr_ln203_fu_636_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 >> zext_ln203_5_fu_602_p1;

assign mul_ln1265_10_fu_1146_p0 = add_ln1192_20_fu_1132_p2;

assign mul_ln1265_10_fu_1146_p1 = data1_10_V_V_TDATA_int;

assign mul_ln1265_10_fu_1146_p2 = ($signed(mul_ln1265_10_fu_1146_p0) * $signed(mul_ln1265_10_fu_1146_p1));

assign mul_ln1265_11_fu_1190_p0 = add_ln1192_22_fu_1176_p2;

assign mul_ln1265_11_fu_1190_p1 = data1_11_V_V_TDATA_int;

assign mul_ln1265_11_fu_1190_p2 = ($signed(mul_ln1265_11_fu_1190_p0) * $signed(mul_ln1265_11_fu_1190_p1));

assign mul_ln1265_12_fu_1234_p0 = add_ln1192_24_fu_1220_p2;

assign mul_ln1265_12_fu_1234_p1 = data1_12_V_V_TDATA_int;

assign mul_ln1265_12_fu_1234_p2 = ($signed(mul_ln1265_12_fu_1234_p0) * $signed(mul_ln1265_12_fu_1234_p1));

assign mul_ln1265_13_fu_1278_p0 = add_ln1192_26_fu_1264_p2;

assign mul_ln1265_13_fu_1278_p1 = data1_13_V_V_TDATA_int;

assign mul_ln1265_13_fu_1278_p2 = ($signed(mul_ln1265_13_fu_1278_p0) * $signed(mul_ln1265_13_fu_1278_p1));

assign mul_ln1265_14_fu_1322_p0 = add_ln1192_28_fu_1308_p2;

assign mul_ln1265_14_fu_1322_p1 = data1_14_V_V_TDATA_int;

assign mul_ln1265_14_fu_1322_p2 = ($signed(mul_ln1265_14_fu_1322_p0) * $signed(mul_ln1265_14_fu_1322_p1));

assign mul_ln1265_15_fu_1366_p0 = add_ln1192_30_fu_1352_p2;

assign mul_ln1265_15_fu_1366_p1 = data1_15_V_V_TDATA_int;

assign mul_ln1265_15_fu_1366_p2 = ($signed(mul_ln1265_15_fu_1366_p0) * $signed(mul_ln1265_15_fu_1366_p1));

assign mul_ln1265_1_fu_750_p0 = add_ln1192_2_fu_736_p2;

assign mul_ln1265_1_fu_750_p1 = data1_1_V_V_TDATA_int;

assign mul_ln1265_1_fu_750_p2 = ($signed(mul_ln1265_1_fu_750_p0) * $signed(mul_ln1265_1_fu_750_p1));

assign mul_ln1265_2_fu_794_p0 = add_ln1192_4_fu_780_p2;

assign mul_ln1265_2_fu_794_p1 = data1_2_V_V_TDATA_int;

assign mul_ln1265_2_fu_794_p2 = ($signed(mul_ln1265_2_fu_794_p0) * $signed(mul_ln1265_2_fu_794_p1));

assign mul_ln1265_3_fu_838_p0 = add_ln1192_6_fu_824_p2;

assign mul_ln1265_3_fu_838_p1 = data1_3_V_V_TDATA_int;

assign mul_ln1265_3_fu_838_p2 = ($signed(mul_ln1265_3_fu_838_p0) * $signed(mul_ln1265_3_fu_838_p1));

assign mul_ln1265_4_fu_882_p0 = add_ln1192_8_fu_868_p2;

assign mul_ln1265_4_fu_882_p1 = data1_4_V_V_TDATA_int;

assign mul_ln1265_4_fu_882_p2 = ($signed(mul_ln1265_4_fu_882_p0) * $signed(mul_ln1265_4_fu_882_p1));

assign mul_ln1265_5_fu_926_p0 = add_ln1192_10_fu_912_p2;

assign mul_ln1265_5_fu_926_p1 = data1_5_V_V_TDATA_int;

assign mul_ln1265_5_fu_926_p2 = ($signed(mul_ln1265_5_fu_926_p0) * $signed(mul_ln1265_5_fu_926_p1));

assign mul_ln1265_6_fu_970_p0 = add_ln1192_12_fu_956_p2;

assign mul_ln1265_6_fu_970_p1 = data1_6_V_V_TDATA_int;

assign mul_ln1265_6_fu_970_p2 = ($signed(mul_ln1265_6_fu_970_p0) * $signed(mul_ln1265_6_fu_970_p1));

assign mul_ln1265_7_fu_1014_p0 = add_ln1192_14_fu_1000_p2;

assign mul_ln1265_7_fu_1014_p1 = data1_7_V_V_TDATA_int;

assign mul_ln1265_7_fu_1014_p2 = ($signed(mul_ln1265_7_fu_1014_p0) * $signed(mul_ln1265_7_fu_1014_p1));

assign mul_ln1265_8_fu_1058_p0 = add_ln1192_16_fu_1044_p2;

assign mul_ln1265_8_fu_1058_p1 = data1_8_V_V_TDATA_int;

assign mul_ln1265_8_fu_1058_p2 = ($signed(mul_ln1265_8_fu_1058_p0) * $signed(mul_ln1265_8_fu_1058_p1));

assign mul_ln1265_9_fu_1102_p0 = add_ln1192_18_fu_1088_p2;

assign mul_ln1265_9_fu_1102_p1 = data1_9_V_V_TDATA_int;

assign mul_ln1265_9_fu_1102_p2 = ($signed(mul_ln1265_9_fu_1102_p0) * $signed(mul_ln1265_9_fu_1102_p1));

assign mul_ln1265_fu_706_p0 = add_ln1192_fu_692_p2;

assign mul_ln1265_fu_706_p1 = data1_0_V_V_TDATA_int;

assign mul_ln1265_fu_706_p2 = ($signed(mul_ln1265_fu_706_p0) * $signed(mul_ln1265_fu_706_p1));

assign res_0_V_V_TDATA_int = {{add_ln1192_1_fu_1389_p2[47:16]}};

assign res_0_V_V_TVALID = regslice_both_res_0_V_V_U_vld_out;

assign res_10_V_V_TDATA_int = {{add_ln1192_21_fu_1619_p2[47:16]}};

assign res_10_V_V_TVALID = regslice_both_res_10_V_V_U_vld_out;

assign res_11_V_V_TDATA_int = {{add_ln1192_23_fu_1642_p2[47:16]}};

assign res_11_V_V_TVALID = regslice_both_res_11_V_V_U_vld_out;

assign res_12_V_V_TDATA_int = {{add_ln1192_25_fu_1665_p2[47:16]}};

assign res_12_V_V_TVALID = regslice_both_res_12_V_V_U_vld_out;

assign res_13_V_V_TDATA_int = {{add_ln1192_27_fu_1688_p2[47:16]}};

assign res_13_V_V_TVALID = regslice_both_res_13_V_V_U_vld_out;

assign res_14_V_V_TDATA_int = {{add_ln1192_29_fu_1711_p2[47:16]}};

assign res_14_V_V_TVALID = regslice_both_res_14_V_V_U_vld_out;

assign res_15_V_V_TDATA_int = {{add_ln1192_31_fu_1734_p2[47:16]}};

assign res_15_V_V_TVALID = regslice_both_res_15_V_V_U_vld_out;

assign res_1_V_V_TDATA_int = {{add_ln1192_3_fu_1412_p2[47:16]}};

assign res_1_V_V_TVALID = regslice_both_res_1_V_V_U_vld_out;

assign res_2_V_V_TDATA_int = {{add_ln1192_5_fu_1435_p2[47:16]}};

assign res_2_V_V_TVALID = regslice_both_res_2_V_V_U_vld_out;

assign res_3_V_V_TDATA_int = {{add_ln1192_7_fu_1458_p2[47:16]}};

assign res_3_V_V_TVALID = regslice_both_res_3_V_V_U_vld_out;

assign res_4_V_V_TDATA_int = {{add_ln1192_9_fu_1481_p2[47:16]}};

assign res_4_V_V_TVALID = regslice_both_res_4_V_V_U_vld_out;

assign res_5_V_V_TDATA_int = {{add_ln1192_11_fu_1504_p2[47:16]}};

assign res_5_V_V_TVALID = regslice_both_res_5_V_V_U_vld_out;

assign res_6_V_V_TDATA_int = {{add_ln1192_13_fu_1527_p2[47:16]}};

assign res_6_V_V_TVALID = regslice_both_res_6_V_V_U_vld_out;

assign res_7_V_V_TDATA_int = {{add_ln1192_15_fu_1550_p2[47:16]}};

assign res_7_V_V_TVALID = regslice_both_res_7_V_V_U_vld_out;

assign res_8_V_V_TDATA_int = {{add_ln1192_17_fu_1573_p2[47:16]}};

assign res_8_V_V_TVALID = regslice_both_res_8_V_V_U_vld_out;

assign res_9_V_V_TDATA_int = {{add_ln1192_19_fu_1596_p2[47:16]}};

assign res_9_V_V_TVALID = regslice_both_res_9_V_V_U_vld_out;

assign select_ln203_1_fu_572_p3 = ((icmp_ln203_fu_540_p2[0:0] === 1'b1) ? zext_ln203_1_fu_550_p1 : zext_ln203_fu_546_p1);

assign select_ln203_2_fu_580_p3 = ((icmp_ln203_fu_540_p2[0:0] === 1'b1) ? xor_ln203_fu_558_p2 : zext_ln203_fu_546_p1);

assign select_ln203_3_fu_622_p3 = ((icmp_ln203_fu_540_p2[0:0] === 1'b1) ? tmp_2_fu_612_p4 : shl_ln203_fu_606_p2);

assign select_ln203_fu_564_p3 = ((icmp_ln203_fu_540_p2[0:0] === 1'b1) ? zext_ln203_fu_546_p1 : zext_ln203_1_fu_550_p1);

assign sext_ln1192_10_fu_1128_p1 = $signed(tmp_21_fu_1118_p4);

assign sext_ln1192_11_fu_1172_p1 = $signed(tmp_23_fu_1162_p4);

assign sext_ln1192_12_fu_1216_p1 = $signed(tmp_25_fu_1206_p4);

assign sext_ln1192_13_fu_1260_p1 = $signed(tmp_27_fu_1250_p4);

assign sext_ln1192_14_fu_1304_p1 = $signed(tmp_29_fu_1294_p4);

assign sext_ln1192_15_fu_1348_p1 = $signed(tmp_31_fu_1338_p4);

assign sext_ln1192_1_fu_732_p1 = $signed(tmp_4_fu_722_p4);

assign sext_ln1192_2_fu_776_p1 = $signed(tmp_6_fu_766_p4);

assign sext_ln1192_3_fu_820_p1 = $signed(tmp_8_fu_810_p4);

assign sext_ln1192_4_fu_864_p1 = $signed(tmp_s_fu_854_p4);

assign sext_ln1192_5_fu_908_p1 = $signed(tmp_11_fu_898_p4);

assign sext_ln1192_6_fu_952_p1 = $signed(tmp_13_fu_942_p4);

assign sext_ln1192_7_fu_996_p1 = $signed(tmp_15_fu_986_p4);

assign sext_ln1192_8_fu_1040_p1 = $signed(tmp_17_fu_1030_p4);

assign sext_ln1192_9_fu_1084_p1 = $signed(tmp_19_fu_1074_p4);

assign sext_ln1192_fu_688_p1 = $signed(trunc_ln1265_fu_684_p1);

assign shl_ln1_fu_1382_p3 = {{tmp_5_reg_1777}, {16'd0}};

assign shl_ln203_1_fu_630_p2 = 1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 << zext_ln203_4_fu_598_p1;

assign shl_ln203_fu_606_p2 = zext_ln203_2_fu_554_p1 << zext_ln203_3_fu_594_p1;

assign shl_ln728_10_fu_1635_p3 = {{tmp_24_reg_1887}, {16'd0}};

assign shl_ln728_11_fu_1658_p3 = {{tmp_26_reg_1897}, {16'd0}};

assign shl_ln728_12_fu_1681_p3 = {{tmp_28_reg_1907}, {16'd0}};

assign shl_ln728_13_fu_1704_p3 = {{tmp_30_reg_1917}, {16'd0}};

assign shl_ln728_14_fu_1727_p3 = {{tmp_32_reg_1927}, {16'd0}};

assign shl_ln728_1_fu_1405_p3 = {{tmp_7_reg_1787}, {16'd0}};

assign shl_ln728_2_fu_1428_p3 = {{tmp_9_reg_1797}, {16'd0}};

assign shl_ln728_3_fu_1451_p3 = {{tmp_3_reg_1807}, {16'd0}};

assign shl_ln728_4_fu_1474_p3 = {{tmp_10_reg_1817}, {16'd0}};

assign shl_ln728_5_fu_1497_p3 = {{tmp_12_reg_1827}, {16'd0}};

assign shl_ln728_6_fu_1520_p3 = {{tmp_14_reg_1837}, {16'd0}};

assign shl_ln728_7_fu_1543_p3 = {{tmp_16_reg_1847}, {16'd0}};

assign shl_ln728_8_fu_1566_p3 = {{tmp_18_reg_1857}, {16'd0}};

assign shl_ln728_9_fu_1589_p3 = {{tmp_20_reg_1867}, {16'd0}};

assign shl_ln728_s_fu_1612_p3 = {{tmp_22_reg_1877}, {16'd0}};

assign shl_ln_fu_526_p3 = {{trunc_ln203_fu_522_p1}, {5'd0}};

assign tmp_11_fu_898_p4 = {{in_data2_V_043_reg_476[191:160]}};

assign tmp_13_fu_942_p4 = {{in_data2_V_043_reg_476[223:192]}};

assign tmp_15_fu_986_p4 = {{in_data2_V_043_reg_476[255:224]}};

assign tmp_17_fu_1030_p4 = {{in_data2_V_043_reg_476[287:256]}};

assign tmp_19_fu_1074_p4 = {{in_data2_V_043_reg_476[319:288]}};

assign tmp_21_fu_1118_p4 = {{in_data2_V_043_reg_476[351:320]}};

assign tmp_23_fu_1162_p4 = {{in_data2_V_043_reg_476[383:352]}};

assign tmp_25_fu_1206_p4 = {{in_data2_V_043_reg_476[415:384]}};

assign tmp_27_fu_1250_p4 = {{in_data2_V_043_reg_476[447:416]}};

assign tmp_29_fu_1294_p4 = {{in_data2_V_043_reg_476[479:448]}};

integer ap_tvar_int_0;

always @ (shl_ln203_fu_606_p2) begin
    for (ap_tvar_int_0 = 1024 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 1023 - 0) begin
            tmp_2_fu_612_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_612_p4[ap_tvar_int_0] = shl_ln203_fu_606_p2[1023 - ap_tvar_int_0];
        end
    end
end

assign tmp_31_fu_1338_p4 = {{in_data2_V_043_reg_476[511:480]}};

assign tmp_4_fu_722_p4 = {{in_data2_V_043_reg_476[63:32]}};

assign tmp_6_fu_766_p4 = {{in_data2_V_043_reg_476[95:64]}};

assign tmp_8_fu_810_p4 = {{in_data2_V_043_reg_476[127:96]}};

assign tmp_s_fu_854_p4 = {{in_data2_V_043_reg_476[159:128]}};

assign trunc_ln1265_fu_684_p1 = in_data2_V_043_reg_476[31:0];

assign trunc_ln203_fu_522_p1 = i_0_i_reg_488[4:0];

assign xor_ln203_1_fu_588_p2 = (select_ln203_fu_564_p3 ^ 11'd1023);

assign xor_ln203_2_fu_648_p2 = (1024'd179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 ^ and_ln203_fu_642_p2);

assign xor_ln203_fu_558_p2 = (zext_ln203_fu_546_p1 ^ 11'd1023);

assign zext_ln203_1_fu_550_p1 = empty_6_fu_534_p2;

assign zext_ln203_2_fu_554_p1 = data2_V_V_TDATA_int;

assign zext_ln203_3_fu_594_p1 = select_ln203_2_fu_580_p3;

assign zext_ln203_4_fu_598_p1 = select_ln203_1_fu_572_p3;

assign zext_ln203_5_fu_602_p1 = xor_ln203_1_fu_588_p2;

assign zext_ln203_fu_546_p1 = shl_ln_fu_526_p3;

endmodule //film_switch_ap_fixed_ap_fixed_ap_fixed_config42_s
