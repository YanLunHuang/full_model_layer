// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s_HH_
#define _sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s_acc_V.h"

namespace ap_rtl {

struct sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > data_V_V_TDATA;
    sc_in< sc_logic > data_V_V_TVALID;
    sc_out< sc_logic > data_V_V_TREADY;
    sc_out< sc_lv<32> > res_V_V_TDATA;
    sc_out< sc_logic > res_V_V_TVALID;
    sc_in< sc_logic > res_V_V_TREADY;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s(sc_module_name name);
    SC_HAS_PROCESS(sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s);

    ~sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s();

    sc_trace_file* mVcdFile;

    sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s_acc_V* acc_V_U;
    regslice_both<32>* regslice_both_data_V_V_U;
    regslice_both<32>* regslice_both_res_V_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > data_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > icmp_ln333_fu_168_p2;
    sc_signal< sc_logic > res_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<1> > icmp_ln340_reg_261;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter2;
    sc_signal< sc_lv<1> > icmp_ln340_reg_261_pp2_iter1_reg;
    sc_signal< sc_lv<13> > indvar_flatten_reg_118;
    sc_signal< sc_lv<8> > k_0_i_reg_129;
    sc_signal< sc_lv<8> > i2_0_i_reg_140;
    sc_signal< sc_lv<8> > i_fu_157_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln333_reg_236;
    sc_signal< bool > ap_block_state4_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<13> > add_ln333_fu_174_p2;
    sc_signal< sc_lv<32> > tmp_V_1_reg_245;
    sc_signal< sc_lv<7> > acc_V_addr_2_reg_250;
    sc_signal< sc_lv<8> > k_fu_199_p2;
    sc_signal< sc_lv<1> > icmp_ln340_fu_211_p2;
    sc_signal< bool > ap_block_state7_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp2_stage0_iter1;
    sc_signal< bool > ap_block_state8_io;
    sc_signal< bool > ap_block_state9_pp2_stage0_iter2;
    sc_signal< bool > ap_block_state9_io;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< sc_lv<8> > i_1_fu_217_p2;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_lv<32> > acc_V_q1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state4;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp2_exit_iter0_state7;
    sc_signal< sc_lv<7> > acc_V_address0;
    sc_signal< sc_logic > acc_V_ce0;
    sc_signal< sc_logic > acc_V_we0;
    sc_signal< sc_lv<32> > acc_V_q0;
    sc_signal< sc_lv<7> > acc_V_address1;
    sc_signal< sc_logic > acc_V_ce1;
    sc_signal< sc_logic > acc_V_we1;
    sc_signal< sc_lv<32> > acc_V_d1;
    sc_signal< sc_lv<8> > i_0_i_reg_107;
    sc_signal< sc_lv<1> > icmp_ln329_fu_151_p2;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > zext_ln331_fu_163_p1;
    sc_signal< sc_lv<64> > zext_ln337_fu_194_p1;
    sc_signal< sc_lv<64> > zext_ln342_fu_223_p1;
    sc_signal< bool > ap_block_pp2_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln334_fu_180_p2;
    sc_signal< sc_lv<8> > select_ln334_fu_186_p3;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > regslice_both_res_V_V_U_apdone_blk;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    sc_signal< sc_logic > regslice_both_data_V_V_U_apdone_blk;
    sc_signal< sc_lv<32> > data_V_V_TDATA_int;
    sc_signal< sc_logic > data_V_V_TVALID_int;
    sc_signal< sc_logic > data_V_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_data_V_V_U_ack_in;
    sc_signal< sc_logic > res_V_V_TVALID_int;
    sc_signal< sc_logic > res_V_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_res_V_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_pp1_stage0;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_pp2_stage0;
    static const sc_lv<7> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<13> ap_const_lv13_1C80;
    static const sc_lv<13> ap_const_lv13_1;
    static const sc_lv<32> ap_const_lv32_6;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_acc_V_address0();
    void thread_acc_V_address1();
    void thread_acc_V_ce0();
    void thread_acc_V_ce1();
    void thread_acc_V_d1();
    void thread_acc_V_we0();
    void thread_acc_V_we1();
    void thread_add_ln333_fu_174_p2();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_01001();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state4_pp1_stage0_iter0();
    void thread_ap_block_state5_pp1_stage0_iter1();
    void thread_ap_block_state7_pp2_stage0_iter0();
    void thread_ap_block_state8_io();
    void thread_ap_block_state8_pp2_stage0_iter1();
    void thread_ap_block_state9_io();
    void thread_ap_block_state9_pp2_stage0_iter2();
    void thread_ap_condition_pp1_exit_iter0_state4();
    void thread_ap_condition_pp2_exit_iter0_state7();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_ready();
    void thread_data_V_V_TDATA_blk_n();
    void thread_data_V_V_TREADY();
    void thread_data_V_V_TREADY_int();
    void thread_i_1_fu_217_p2();
    void thread_i_fu_157_p2();
    void thread_icmp_ln329_fu_151_p2();
    void thread_icmp_ln333_fu_168_p2();
    void thread_icmp_ln334_fu_180_p2();
    void thread_icmp_ln340_fu_211_p2();
    void thread_k_fu_199_p2();
    void thread_res_V_V_TDATA_blk_n();
    void thread_res_V_V_TVALID();
    void thread_res_V_V_TVALID_int();
    void thread_select_ln334_fu_186_p3();
    void thread_zext_ln331_fu_163_p1();
    void thread_zext_ln337_fu_194_p1();
    void thread_zext_ln342_fu_223_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
