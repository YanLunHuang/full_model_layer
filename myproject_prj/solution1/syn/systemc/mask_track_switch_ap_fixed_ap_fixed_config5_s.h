// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mask_track_switch_ap_fixed_ap_fixed_config5_s_HH_
#define _mask_track_switch_ap_fixed_ap_fixed_config5_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mask_track_switch_ap_fixed_ap_fixed_config5_s : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > data_V_V_TDATA;
    sc_in< sc_logic > data_V_V_TVALID;
    sc_out< sc_logic > data_V_V_TREADY;
    sc_out< sc_lv<32> > res_V_V_TDATA;
    sc_out< sc_logic > res_V_V_TVALID;
    sc_in< sc_logic > res_V_V_TREADY;


    // Module declarations
    mask_track_switch_ap_fixed_ap_fixed_config5_s(sc_module_name name);
    SC_HAS_PROCESS(mask_track_switch_ap_fixed_ap_fixed_config5_s);

    ~mask_track_switch_ap_fixed_ap_fixed_config5_s();

    sc_trace_file* mVcdFile;

    regslice_both<32>* regslice_both_data_V_V_U;
    regslice_both<32>* regslice_both_res_V_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > data_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln236_fu_85_p2;
    sc_signal< sc_logic > res_V_V_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > icmp_ln238_1_reg_156;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln238_1_reg_156_pp0_iter1_reg;
    sc_signal< sc_lv<9> > indvar_flatten_reg_63;
    sc_signal< sc_lv<3> > k_0_i_reg_74;
    sc_signal< sc_lv<1> > icmp_ln236_reg_137;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<9> > add_ln236_fu_91_p2;
    sc_signal< sc_lv<1> > icmp_ln1498_fu_97_p2;
    sc_signal< sc_lv<1> > icmp_ln1498_reg_146;
    sc_signal< sc_lv<3> > k_fu_115_p3;
    sc_signal< sc_lv<3> > k_reg_151;
    sc_signal< sc_lv<1> > icmp_ln238_1_fu_123_p2;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<3> > ap_phi_mux_k_0_i_phi_fu_78_p4;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > icmp_ln238_fu_109_p2;
    sc_signal< sc_lv<3> > add_ln238_fu_103_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > regslice_both_res_V_V_U_apdone_blk;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > regslice_both_data_V_V_U_apdone_blk;
    sc_signal< sc_lv<32> > data_V_V_TDATA_int;
    sc_signal< sc_logic > data_V_V_TVALID_int;
    sc_signal< sc_logic > data_V_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_data_V_V_U_ack_in;
    sc_signal< sc_lv<32> > res_V_V_TDATA_int;
    sc_signal< sc_logic > res_V_V_TVALID_int;
    sc_signal< sc_logic > res_V_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_res_V_V_U_vld_out;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<9> ap_const_lv9_156;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_6;
    static const sc_lv<32> ap_const_lv32_10000;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln236_fu_91_p2();
    void thread_add_ln238_fu_103_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_k_0_i_phi_fu_78_p4();
    void thread_ap_ready();
    void thread_data_V_V_TDATA_blk_n();
    void thread_data_V_V_TREADY();
    void thread_data_V_V_TREADY_int();
    void thread_icmp_ln1498_fu_97_p2();
    void thread_icmp_ln236_fu_85_p2();
    void thread_icmp_ln238_1_fu_123_p2();
    void thread_icmp_ln238_fu_109_p2();
    void thread_k_fu_115_p3();
    void thread_res_V_V_TDATA_blk_n();
    void thread_res_V_V_TDATA_int();
    void thread_res_V_V_TVALID();
    void thread_res_V_V_TVALID_int();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
