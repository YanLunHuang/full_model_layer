// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_V_TDATA,
        data_V_V_TVALID,
        data_V_V_TREADY,
        res_V_V_TDATA,
        res_V_V_TVALID,
        res_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp1_stage0 = 7'd8;
parameter    ap_ST_fsm_state6 = 7'd16;
parameter    ap_ST_fsm_pp2_stage0 = 7'd32;
parameter    ap_ST_fsm_state10 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] data_V_V_TDATA;
input   data_V_V_TVALID;
output   data_V_V_TREADY;
output  [31:0] res_V_V_TDATA;
output   res_V_V_TVALID;
input   res_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_V_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln333_fu_168_p2;
reg    res_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln340_reg_261;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln340_reg_261_pp2_iter1_reg;
reg   [12:0] indvar_flatten_reg_118;
reg   [7:0] k_0_i_reg_129;
reg   [7:0] i2_0_i_reg_140;
wire   [7:0] i_fu_157_p2;
wire    ap_CS_fsm_state2;
reg   [0:0] icmp_ln333_reg_236;
reg    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [12:0] add_ln333_fu_174_p2;
reg   [31:0] tmp_V_1_reg_245;
reg   [6:0] acc_V_addr_2_reg_250;
wire   [7:0] k_fu_199_p2;
wire   [0:0] icmp_ln340_fu_211_p2;
wire    ap_block_state7_pp2_stage0_iter0;
wire    ap_block_state8_pp2_stage0_iter1;
reg    ap_block_state8_io;
wire    ap_block_state9_pp2_stage0_iter2;
reg    ap_block_state9_io;
reg    ap_block_pp2_stage0_11001;
wire   [7:0] i_1_fu_217_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [31:0] acc_V_q1;
wire    ap_CS_fsm_state3;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state6;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state7;
reg   [6:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
wire   [31:0] acc_V_q0;
reg   [6:0] acc_V_address1;
reg    acc_V_ce1;
reg    acc_V_we1;
wire   [31:0] acc_V_d1;
reg   [7:0] i_0_i_reg_107;
wire   [0:0] icmp_ln329_fu_151_p2;
reg    ap_block_state1;
wire   [63:0] zext_ln331_fu_163_p1;
wire   [63:0] zext_ln337_fu_194_p1;
wire   [63:0] zext_ln342_fu_223_p1;
wire    ap_block_pp2_stage0_01001;
wire   [0:0] icmp_ln334_fu_180_p2;
wire   [7:0] select_ln334_fu_186_p3;
wire    ap_CS_fsm_state10;
wire    regslice_both_res_V_V_U_apdone_blk;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_data_V_V_U_apdone_blk;
wire   [31:0] data_V_V_TDATA_int;
wire    data_V_V_TVALID_int;
reg    data_V_V_TREADY_int;
wire    regslice_both_data_V_V_U_ack_in;
reg    res_V_V_TVALID_int;
wire    res_V_V_TREADY_int;
wire    regslice_both_res_V_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s_acc_V #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(32'd0),
    .q0(acc_V_q0),
    .address1(acc_V_address1),
    .ce1(acc_V_ce1),
    .we1(acc_V_we1),
    .d1(acc_V_d1),
    .q1(acc_V_q1)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_data_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_V_V_TDATA),
    .vld_in(data_V_V_TVALID),
    .ack_in(regslice_both_data_V_V_U_ack_in),
    .data_out(data_V_V_TDATA_int),
    .vld_out(data_V_V_TVALID_int),
    .ack_out(data_V_V_TREADY_int),
    .apdone_blk(regslice_both_data_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_res_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(acc_V_q1),
    .vld_in(res_V_V_TVALID_int),
    .ack_in(res_V_V_TREADY_int),
    .data_out(res_V_V_TDATA),
    .vld_out(regslice_both_res_V_V_U_vld_out),
    .ack_out(res_V_V_TREADY),
    .apdone_blk(regslice_both_res_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_res_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state7) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state7)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i2_0_i_reg_140 <= 8'd0;
    end else if (((icmp_ln340_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i2_0_i_reg_140 <= i_1_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_107 <= 8'd0;
    end else if (((icmp_ln329_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_107 <= i_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_118 <= 13'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln333_fu_168_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten_reg_118 <= add_ln333_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_0_i_reg_129 <= 8'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln333_fu_168_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        k_0_i_reg_129 <= k_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln333_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        acc_V_addr_2_reg_250 <= zext_ln337_fu_194_p1;
        tmp_V_1_reg_245 <= data_V_V_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln333_reg_236 <= icmp_ln333_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln340_reg_261 <= icmp_ln340_fu_211_p2;
        icmp_ln340_reg_261_pp2_iter1_reg <= icmp_ln340_reg_261;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        acc_V_address0 = zext_ln337_fu_194_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_V_address0 = zext_ln331_fu_163_p1;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        acc_V_address1 = zext_ln342_fu_223_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        acc_V_address1 = acc_V_addr_2_reg_250;
    end else begin
        acc_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        acc_V_ce1 = 1'b1;
    end else begin
        acc_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln329_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln333_reg_236 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        acc_V_we1 = 1'b1;
    end else begin
        acc_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln333_fu_168_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln340_fu_211_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_res_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_res_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln333_fu_168_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data_V_V_TDATA_blk_n = data_V_V_TVALID_int;
    end else begin
        data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_data_V_V_U_ack_in == 1'b1) & (data_V_V_TVALID == 1'b1))) begin
        data_V_V_TREADY = 1'b1;
    end else begin
        data_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln333_fu_168_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data_V_V_TREADY_int = 1'b1;
    end else begin
        data_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0) & (icmp_ln340_reg_261_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln340_reg_261 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)))) begin
        res_V_V_TDATA_blk_n = res_V_V_TREADY_int;
    end else begin
        res_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln340_reg_261 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        res_V_V_TVALID_int = 1'b1;
    end else begin
        res_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln329_fu_151_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((icmp_ln333_fu_168_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((icmp_ln333_fu_168_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln340_fu_211_p2 == 1'd1)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln340_fu_211_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((regslice_both_res_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_d1 = (tmp_V_1_reg_245 + acc_V_q0);

assign add_ln333_fu_174_p2 = (indvar_flatten_reg_118 + 13'd1);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((icmp_ln333_fu_168_p2 == 1'd0) & (data_V_V_TVALID_int == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((icmp_ln333_fu_168_p2 == 1'd0) & (data_V_V_TVALID_int == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4_pp1_stage0_iter0 = ((icmp_ln333_fu_168_p2 == 1'd0) & (data_V_V_TVALID_int == 1'b0));
end

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln340_reg_261 == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state8_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((icmp_ln340_reg_261_pp2_iter1_reg == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state9_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign i_1_fu_217_p2 = (i2_0_i_reg_140 + 8'd1);

assign i_fu_157_p2 = (i_0_i_reg_107 + 8'd1);

assign icmp_ln329_fu_151_p2 = ((i_0_i_reg_107 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln333_fu_168_p2 = ((indvar_flatten_reg_118 == 13'd7296) ? 1'b1 : 1'b0);

assign icmp_ln334_fu_180_p2 = ((k_0_i_reg_129 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln340_fu_211_p2 = ((i2_0_i_reg_140 == 8'd128) ? 1'b1 : 1'b0);

assign k_fu_199_p2 = (select_ln334_fu_186_p3 + 8'd1);

assign res_V_V_TVALID = regslice_both_res_V_V_U_vld_out;

assign select_ln334_fu_186_p3 = ((icmp_ln334_fu_180_p2[0:0] === 1'b1) ? 8'd0 : k_0_i_reg_129);

assign zext_ln331_fu_163_p1 = i_0_i_reg_107;

assign zext_ln337_fu_194_p1 = select_ln334_fu_186_p3;

assign zext_ln342_fu_223_p1 = i2_0_i_reg_140;

endmodule //sum1d_switch_ap_fixed_ap_fixed_32_16_5_3_0_config12_s
